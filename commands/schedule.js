const moment = require('moment');
const { defaultDateFormat, serverDateFormat } = require('../config');
const pschedule = require('../functions/schedule');

module.exports = {
  name: 'schedule',
  description: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å',
  aliases: ['s', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '—Ä'],
  usage: '',
  arguments: [
    {
      name: 'tw',
      description: '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞',
    },
    {
      name: 'week',
      description: '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é',
    },
    {
      name: 'nextWeek',
      description: '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é',
    },
    {
      name: 'month',
      description: '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—è—Ü',
    },
  ],
  async execute(message, args) {
    const today = moment().format(serverDateFormat);
    const tomorrow = moment().add(1, 'days').format(serverDateFormat);
    const [command] = args;
    const argsInstructions = {
      tw: {
        name: '–∑–∞–≤—Ç—Ä–∞',
        start: tomorrow,
        finish: tomorrow,
      },
      week: {
        name: '–Ω–µ–¥–µ–ª—é',
      },
      nextWeek: {
        name: '—Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é',
        start: moment().add(1, 'weeks').startOf('isoWeek').format(serverDateFormat),
        finish: moment().add(1, 'weeks').endOf('isoWeek').format(serverDateFormat),
      },
      month: {
        name: '–º–µ—Å—è—Ü',
        start: today,
        finish: moment().add(1, 'month').format(serverDateFormat),
      },
      empty: {
        name: '—Å–µ–≥–æ–¥–Ω—è',
        start: today,
        finish: today,
      },
    };

    if (command && (command === 'empty' || !argsInstructions[command])) {
      message.reply(`–Ω–µ –∑–Ω–∞—é, —á—Ç–æ –∑–∞ –∞—Ä–≥—É–º–µ–Ω—Ç —Ç–∞–∫–æ–π \`${command}\``);
      return;
    }

    // return message
    message.channel.send('`–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞...`')
      .then(async (sentMessage) => {
        const selectedDate = argsInstructions[!args.length ? 'empty' : command];
        const { schedule } = await pschedule.get(selectedDate) || {};

        if (typeof schedule !== 'object' && !Array.isArray(schedule)) {
          sentMessage.edit('`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ`');
          return;
        }

        sentMessage.edit(`\`–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ${selectedDate.name}\``);

        // if schedule data not exists
        if (Array.isArray(schedule) && schedule.length <= 0) {
          message.channel.send('–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç üòé');
          return;
        }

        schedule.forEach((item) => {
          const itemData = [];
          const {
            date,
            discipline,
            dayOfWeekString,
            kindOfWork,
            beginLesson,
            endLesson,
            lecturer,
          } = item;

          itemData.push('```');
          itemData.push(`[${dayOfWeekString}] ${discipline} - ${moment(new Date(date))
            .format(defaultDateFormat)}`);
          itemData.push(kindOfWork);
          itemData.push(`${beginLesson} - ${endLesson}`);
          itemData.push(lecturer);
          itemData.push('```');

          return message.channel.send(itemData, { split: true });
        });
      });
  },
};
