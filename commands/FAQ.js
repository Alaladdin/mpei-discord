const permissions = require('../util/permissions');
const { random, accessError } = require('../data/phrases');
const { get: getFAQ, add: addFAQ, delete: deleteFAQ } = require('../functions/FAQ');

module.exports = {
  name: 'faq',
  description: '–í—ã–≤–æ–¥–∏—Ç FAQ',
  aliases: ['f', 'qa'],
  arguments: {
    add: {
      name: 'add',
      description: '–æ–±–Ω–æ–≤–ª—è–µ—Ç FAQ',
      permissions: ['ADMINISTRATOR'],
    },
    rm: {
      name: 'rm',
      description: '—É–¥–∞–ª—è–µ—Ç –ø—É–Ω–∫—Ç –∏–∑ FAQ',
      permissions: ['ADMINISTRATOR'],
    },
  },
  async execute(message, args) {
    const [command, arg1] = args;

    // if arguments not passed -> get FAQ list
    if (!args.length) {
      message.channel.send('`–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞...`')
        .then(async (sentMessage) => {
          const { faq } = await getFAQ() || {};
          const msg = [];

          if (faq && faq.length) {
            msg.push('```');
            msg.push('FAQ\n');
            faq.forEach((item) => {
              msg.push(item.question, `${item.answer}\n`);
            });
            msg.push('```');
          } else if (faq && !faq.length) {
            msg.push('FAQ –ø—É—Å—Ç–æ–π üòî');
          } else {
            msg.push('–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ üòî');
          }

          sentMessage.edit(msg.join('\n'));
        });

      return;
    }

    if (!Object.keys(this.arguments).includes(command)) {
      message.reply(`–Ω–µ –∑–Ω–∞—é, —á—Ç–æ –∑–∞ –∞—Ä–≥—É–º–µ–Ω—Ç —Ç–∞–∫–æ–π \`${command}\``);
      return;
    }

    // check user permission to this command
    const hasPermission = permissions.check(message, this.arguments[command].permissions);

    // if no permission -> break
    if (!hasPermission) {
      message.reply(random(accessError));
      return;
    }

    // add question to FAQ
    if (command === 'add') {
      // –ï—Å–ª–∏ id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ
      if (!arg1 || (arg1 && arg1.length <= 0)) {
        message.reply('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å `id` —Å–æ–æ–±—â–µ–Ω–∏—è');
        return;
      }

      // else -> set new actuality
      await addFAQ(message, arg1)
        .then(() => message.reply('–≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω üî•'))
        .catch((err) => {
          console.error(err);
          const errorText = err.code === 'ECONNREFUSED' ? 'Error: connection error' : err.message;
          message.reply(`–Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤ FAQ üòî \n\`${errorText || ''}\``);
        });
    }
    if (command === 'rm') {
      // –ï—Å–ª–∏ id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ
      const question = args.splice(1).join(' ').trim();

      if (!question) {
        message.reply('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å "question" –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
        return;
      }

      await deleteFAQ(question)
        .then(() => message.reply('–≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ FAQ üî•'))
        .catch((err) => {
          console.error(err);
          const errorText = err.code === 'ECONNREFUSED' ? 'Error: connection error' : err.message;
          message.reply(`–Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å üòî \n\`${errorText || ''}\``);
        });
    }
  },
};
