const permissions = require('../utility/permissions');
const pdate = require('../utility/pdate');
const { random, accessError } = require('../data/phrases');
const { get: getActuality, set: setActuality } = require('../functions/actuality');

module.exports = {
  name: 'actuality',
  description: '–í—ã–≤–æ–¥–∏—Ç "–∞–∫—Ç—É–∞–ª–æ—á–∫—É"',
  aliases: ['a', 'act', 'news', '–∞–∫—Ç'],
  arguments: {
    set: {
      name: 'set',
      description: '–æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª–æ—á–∫–∏',
      permissions: ['ADMINISTRATOR'],
    },
    watch: {
      name: 'watch',
      description: '—Å–ª–µ–¥–∏—Ç –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –∞–∫—Ç—É–∞–ª–æ—á–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–∞–º',
      permissions: ['ADMINISTRATOR'],
    },
  },
  async execute(message, args) {
    const [command, messageId] = args;

    // if arguments not passed -> get actuality list
    if (!args.length) {
      message.channel.send('`–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞...`')
        .then(async (sentMessage) => {
          const { actuality } = await getActuality() || {};
          const msg = [];

          if (actuality && 'content' in actuality) {
            msg.push('```');
            msg.push(`–ê–∫—Ç—É–∞–ª–∏—Ç–∏. –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${pdate.format(actuality.date, 'ru-RU')}\n`);
            msg.push(actuality.content);
            msg.push('```');
          } else {
            msg.push('–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ üòî');
          }

          sentMessage.edit(msg.join('\n'));
        });

      return;
    }

    // actuality commands set up
    if (command !== 'set') {
      message.reply(`–Ω–µ –∑–Ω–∞—é, —á—Ç–æ –∑–∞ –∞—Ä–≥—É–º–µ–Ω—Ç —Ç–∞–∫–æ–π \`${command}\``);
      return;
    }

    // –ï—Å–ª–∏ id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ
    if (!messageId || (messageId && messageId.length <= 0)) {
      message.reply('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å `id` —Å–æ–æ–±—â–µ–Ω–∏—è');
      return;
    }

    // check user permission to this command
    const hasPermission = permissions.check(message, this.arguments.set.permissions);

    // if no permission -> break
    if (!hasPermission) {
      message.reply(random(accessError));
      return;
    }

    // else -> set new actuality
    await setActuality(message, messageId)
      .then(({ actuality } = {}) => {
        if (actuality && 'content' in actuality) {
          message.reply('–ø–æ—Ö–æ–∂–µ, –∞–∫—Ç—É–∞–ª–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ üî•');
        } else {
          message.reply('–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç—É–∞–ª–æ—á–∫—É üòî');
        }
      });
  },
};
