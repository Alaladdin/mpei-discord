const moment = require('moment');
const { defaultDateFormat } = require('../config');
const permissions = require('../util/permissions');
const { random, accessError } = require('../data/phrases');
const { getters: storeGetter, setters: storeSetter } = require('../store/index');
const { get: getActuality, set: setActuality } = require('../functions/actuality');

module.exports = {
  name: 'actuality',
  description: '–í—ã–≤–æ–¥–∏—Ç "–∞–∫—Ç—É–∞–ª–æ—á–∫—É"',
  aliases: ['a', 'act', 'news', '–∞–∫—Ç'],
  arguments: {
    set: {
      name: 'set',
      description: '–æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª–æ—á–∫–∏',
      permissions: ['ADMINISTRATOR'],
    },
    au: {
      name: 'autoposting',
      description: '–æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞',
      permissions: ['ADMINISTRATOR'],
    },
    lazy: {
      name: 'lazy',
      description: '–ø–æ–ª—É—á–∞–µ—Ç "–Ω–µ—Å—Ä–æ—á–Ω—É—é" –∞–∫—Ç—É–∞–ª–æ—á–∫—É',
    },
  },
  async execute(message, args) {
    const [command, arg1, arg2] = args;

    // if arguments not passed -> get actuality list
    if (!args.length || command === 'lazy') {
      message.channel.send('`–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞...`')
        .then(async (sentMessage) => {
          const { actuality } = await getActuality() || {};
          const msg = [];

          if (actuality && 'content' in actuality) {
            msg.push('```');

            if (command === 'lazy') {
              msg.push('–ù–µ—Å—Ä–æ—á–Ω–æ–µ –∞–∫—Ç—É–∞–ª–∏—Ç–∏\n');
              msg.push(actuality.lazyContent);
            } else {
              msg.push(`–ê–∫—Ç—É–∞–ª–∏—Ç–∏. –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${moment(actuality.date)
                .format(defaultDateFormat)}\n`);
              msg.push(actuality.content);
            }

            msg.push('```');
          } else {
            msg.push('–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ üòî');
          }

          sentMessage.edit(msg.join('\n'));
        });

      return;
    }

    // actuality commands set up
    if (!Object.keys(this.arguments).includes(command)) {
      message.reply(`–Ω–µ –∑–Ω–∞—é, —á—Ç–æ –∑–∞ –∞—Ä–≥—É–º–µ–Ω—Ç —Ç–∞–∫–æ–π \`${command}\``);
      return;
    }

    // check user permission to this command
    const hasPermission = permissions.check(message, this.arguments[command].permissions);

    // if no permission -> break
    if (!hasPermission) {
      message.reply(random(accessError));
      return;
    }

    // autopost
    if (command === 'au') {
      const currChannelId = storeGetter.getActualityChannel();
      const currChannel = await message.guild.channels.cache.get(currChannelId);

      // for example: arg1 = 'channel', arg2 = 'channelId'
      if (!arg1 && !arg2) {
        const msg = [];
        msg.push('**–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞**\n');
        msg.push(`**–ö–∞–Ω–∞–ª:** ${(currChannel && currChannel.toString()) || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
        msg.push(`**–í—Ä–µ–º—è:** \`${storeGetter.getActualityTime() || '* * * * * *'}\``);
        await message.channel.send(msg, { split: true });
        return;
      }

      // if unknown arguments were passed
      if (!['channel', 'time'].includes(arg1)) {
        message.reply(`–Ω–µ –∑–Ω–∞—é, —á—Ç–æ –∑–∞ –∞—Ä–≥—É–º–µ–Ω—Ç —Ç–∞–∫–æ–π \`${arg1}\``);
        return;
      }

      // if arguments were passed, but arg2 is empty
      if (['channel', 'time'].includes(arg1) && !arg2) {
        message.reply(`–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å \`${arg1 === 'channel' ? 'id –∫–∞–Ω–∞–ª–∞' : '–≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏'}\``);
        return;
      }

      // if channel
      if (arg1 === 'channel') {
        const newChannel = await message.guild.channels.cache.get(arg2);

        if (!newChannel) {
          message.reply('–∫–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º `id` –Ω–µ –Ω–∞–π–¥–µ–Ω');
          return;
        }

        await storeSetter.setActualityChannel(arg2)
          .then(() => {
            message.reply(`–∫–∞–Ω–∞–ª –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –∞–∫—Ç—É–∞–ª–æ—á–∫–∏ –∏–∑–º–µ–Ω–µ–Ω${currChannelId ? ` —Å ${currChannel.toString()}` : ''} –Ω–∞ ${newChannel.toString()}`);
          })
          .catch((err) => {
            message.reply(`–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –∞–∫—Ç—É–∞–ª–æ—á–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n\n\`${err.statusText}\``);
          });
        return;
      }

      // if time
      if (arg1 === 'time') {
        const currTime = storeGetter.getActualityTime();
        const symbolsValidation = (arr) => arr.join(' ')
          .replaceAll(/[^0-9|?* ]/gm, '')
          .split(' ')
          .filter((item) => item)
          .join(' ');

        const newTime = symbolsValidation(args.splice(2));

        await storeSetter.setActualityTime(newTime)
          .then(() => {
            message.reply(`–≤—Ä–µ–º—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –∞–∫—Ç—É–∞–ª–æ—á–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–æ ${currTime ? `—Å \`${currTime}\`` : ''} –Ω–∞ \`${newTime}\``);
          })
          .catch((err) => {
            message.reply(`–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –∞–∫—Ç—É–∞–ª–æ—á–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n\n\`${err.statusText}\``);
          });
        return;
      }
    }

    // set actuality
    if (command === 'set') {
      // –ï—Å–ª–∏ id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ
      if (!arg1 || (arg1 && arg1.length <= 0)) {
        message.reply('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å `id` —Å–æ–æ–±—â–µ–Ω–∏—è');
        return;
      }

      const contentType = arg1.toLowerCase() === 'lazy' ? 'lazyContent' : 'content';
      const isContent = contentType === 'content';
      const messageId = isContent ? arg1 : arg2;

      // else -> set new actuality
      await setActuality(message, messageId, contentType)
        .then(() => message.reply(`${!isContent ? '–Ω–µ—Å—Ä–æ—á–Ω–∞—è ' : ''}–∞–∫—Ç—É–∞–ª–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ üî•`))
        .catch((err) => {
          console.error(err);
          message.reply('–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç—É–∞–ª–æ—á–∫—É üòî');
        });
    }
  },
};
